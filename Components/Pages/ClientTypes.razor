@page "/clienttypes"
@using Microsoft.EntityFrameworkCore;


@inject IUnitOfWork UnitOfWork
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudContainer>
    <MudTable Items="@clientTypes" Dense="@dense" Hover="@hover" Bordered="@bordered"
              Striped="@striped" Filter="new Func<ClientType,bool>(FilterFunc)"
              @bind-SelectedItem="selectedItem">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Client Types</MudText>
            <MudSpacer />
            <MudButton Color="Color.Primary"
                       StartIcon="@Icons.Material.Filled.Add"
                       OnClick="OpenAddDialog">Add Client Type</MudButton>
            <MudTextField @bind-Value="searchString" Placeholder="Search"
                          Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Search"
                          IconSize="Size.Medium" Class="mt-0 ml-4">
            </MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Id</MudTh>
            <MudTh>Name</MudTh>
            <MudTh>Address Count</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Id">@context.Id</MudTd>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Address Count">@(context.Addresses?.Count ?? 0)</MudTd>
            <MudTd>
                <MudIconButton Icon="@Icons.Material.Filled.Edit"
                               Color="Color.Primary"
                               Size="Size.Small"
                               OnClick="@(() => OpenEditDialog(context))" />

                @if (context.Addresses == null || context.Addresses.Count == 0)
                {
                    <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                   Color="Color.Error"
                                   Size="Size.Small"
                                   OnClick="@(() => OpenDeleteDialog(context))" />
                }
                else
                {
                    <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                   Color="Color.Error"
                                   Size="Size.Small"
                                   Disabled="true" />
                }
            </MudTd>

        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[] { 5, 10, 25, 50 }" />
        </PagerContent>
    </MudTable>

    <div class="d-flex flex-wrap mt-4">
        <MudSwitch @bind-Value="hover" Color="Color.Primary">Hover</MudSwitch>
        <MudSwitch @bind-Value="dense" Color="Color.Secondary">Dense</MudSwitch>
        <MudSwitch @bind-Value="striped" Color="Color.Tertiary">Striped</MudSwitch>
        <MudSwitch @bind-Value="bordered" Color="Color.Warning">Bordered</MudSwitch>
        <MudSpacer />
        <div style="min-width:200px;">
            <MudText Class="align-self-center">
                Selected: @selectedItem?.Name
            </MudText>
        </div>
    </div>
</MudContainer>

@code {
    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;
    private string searchString = "";
    private ClientType selectedItem = null;
    private IEnumerable<ClientType> clientTypes = new List<ClientType>();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        // clientTypes = (await UnitOfWork.ClientTypes.GetAllAsync()).ToList
    
        clientTypes = (await UnitOfWork.ClientTypes.GetAllWithIncludeAsync(c => c.Addresses)).ToList();
    

    }

    private async Task OpenAddDialog()
    {
        var dialog = await DialogService.ShowAsync<AddClientTypeDialog>("Add Client Type");
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadData();
            Snackbar.Add("Client type has been added", MudBlazor.Severity.Success);
        }
    }

    private async Task OpenEditDialog(ClientType clientType)
    {
        var parameters = new DialogParameters
        {
            { "ClientType", clientType }
        };

        var dialog = await DialogService.ShowAsync<EditClientTypeDialog>("Edit Client Type", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadData();
            Snackbar.Add("Client type has been updated", MudBlazor.Severity.Success);
        }
    }

    private async Task OpenDeleteDialog(ClientType clientType)
    {
        var parameters = new DialogParameters
    {
        { "ContentText", $"Are you sure you want to delete client type '{clientType.Name}'?" },
        { "ButtonText", "Delete" },
        { "Color", Color.Error }
    };

        var dialog = await DialogService.ShowAsync<DeleteDialog>("Delete", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            try
            {
                await UnitOfWork.ClientTypes.DeleteAsync(clientType.Id);
                await UnitOfWork.SaveChangesAsync();
                Snackbar.Add("Client type has been deleted", MudBlazor.Severity.Success);
            }
            catch (DbUpdateException ex)
            {         
                Snackbar.Add("Error: Cannot delete because it has used in Addresses table.", MudBlazor.Severity.Error);
            }
            finally
            {
                await LoadData(); 
            }
        }
    }


    private bool FilterFunc(ClientType clientType)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;

        if (clientType.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (clientType.Id.ToString().Contains(searchString))
            return true;

        return false;
    }
}
