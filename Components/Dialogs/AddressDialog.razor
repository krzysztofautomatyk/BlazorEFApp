@using BlazorEFApp.Domain.Entities
@using BlazorEFApp.Domain.Validators
@using FluentValidation
@inject IUnitOfWork UnitOfWork
@inject IValidator<Address> AddressValidator
@inject ISnackbar Snackbar

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">@(Address.Id == 0 ? "Add Address" : "Edit Address")</MudText>
    </TitleContent>
    <DialogContent>
        <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
            <MudGrid>
                <MudItem xs="12">
                    <MudTextField T="string"
                                  @bind-Value="Address.Street"
                                  Label="Street"
                                  Required="true"
                                  Validation="@(new Func<string, string>(ValidateStreet))"
                                  RequiredError="Street is required!" />
                </MudItem>

                <MudItem xs="12">
                    <MudTextField T="string"
                                  @bind-Value="Address.City"
                                  Label="City"
                                  Required="true"
                                  Validation="@(new Func<string, string>(ValidateCity))"
                                  RequiredError="City is required!" />
                </MudItem>

                <MudItem xs="12">
                    <MudTextField T="string"
                                  @bind-Value="Address.PostalCode"
                                  Label="Postal Code"
                                  Required="true"
                                  Validation="@(new Func<string, string>(ValidatePostalCode))"
                                  RequiredError="Postal code is required!"
                                  Placeholder="XX-XXX" />
                </MudItem>

                <MudItem xs="12">
                    <MudSelect T="int"
                               Label="Client Type"
                               @bind-Value="Address.ClientTypeId"
                               Required="true"
                               RequiredError="Client type is required!">
                        @if (ClientTypes != null)
                        {
                            @foreach (var clientType in ClientTypes)
                            {
                                <MudSelectItem Value="@clientType.Id">@clientType.Name</MudSelectItem>
                            }
                        }
                    </MudSelect>
                </MudItem>
            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary"
                   OnClick="Submit"
                   Disabled="@(!success)">Save</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; }
    [Parameter] public Address Address { get; set; }
    [Parameter] public IEnumerable<ClientType> ClientTypes { get; set; }

    private bool success;
    private string[] errors = { };
    private MudForm form;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            ClientTypes = await UnitOfWork.ClientTypes.GetAllAsync() ?? new List<ClientType>();

            if (!ClientTypes.Any())
            {
                Snackbar.Add("No client types available. Please add client types first.", MudBlazor.Severity.Warning);
                MudDialog.Cancel();
                return;
            }

            Address ??= new Address
                {
                    ClientTypeId = ClientTypes.First().Id
                };

            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error initializing form: {ex.Message}", MudBlazor.Severity.Error);
            MudDialog.Cancel();
        }
    }

    private string ValidateStreet(string street)
    {
        if (string.IsNullOrWhiteSpace(street))
            return "Street is required!";
        if (street.Length > 100)
            return "Street cannot exceed 100 characters";
        return null;
    }

    private string ValidateCity(string city)
    {
        if (string.IsNullOrWhiteSpace(city))
            return "City is required!";
        if (city.Length > 50)
            return "City cannot exceed 50 characters";
        return null;
    }

    private string ValidatePostalCode(string postalCode)
    {
        if (string.IsNullOrWhiteSpace(postalCode))
            return "Postal code is required!";
        if (!System.Text.RegularExpressions.Regex.IsMatch(postalCode, @"^\d{2}-\d{3}$"))
            return "Invalid postal code format (XX-XXX)";
        return null;
    }

    private async Task Submit()
    {
        await form.Validate();

        if (form.IsValid)
        {
            try
            {
                if (Address.Id == 0)
                {
                    await UnitOfWork.Addresses.AddAsync(Address);
                }
                else
                {
                    // Pobierz istniejący adres
                    var existingAddress = await UnitOfWork.Addresses.GetByIdAsync(Address.Id);
                    if (existingAddress != null)
                    {
                        // Zaktualizuj właściwości
                        existingAddress.Street = Address.Street;
                        existingAddress.City = Address.City;
                        existingAddress.PostalCode = Address.PostalCode;
                        existingAddress.ClientTypeId = Address.ClientTypeId;

                        UnitOfWork.Addresses.Update(existingAddress);
                    }
                }

                await UnitOfWork.SaveChangesAsync();
                MudDialog.Close(DialogResult.Ok(true));
                Snackbar.Add($"Address {(Address.Id == 0 ? "added" : "updated")} successfully",MudBlazor.Severity.Success);
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error saving address: {ex.Message}", MudBlazor.Severity.Error);
            }
        }
    }


    private void Cancel() => MudDialog.Cancel();
}
